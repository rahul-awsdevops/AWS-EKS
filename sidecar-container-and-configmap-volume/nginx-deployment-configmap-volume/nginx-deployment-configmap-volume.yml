apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-app
  labels:
    app: nginx-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
        - name: nginx-app
          image: rahulranjan1207015/nginx-app:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/nginx.conf  # Mount the ConfigMap here as the nginx.conf file
              subPath: nginx.conf  # Ensure the file is mounted correctly
            - name: log-volume
              mountPath: /var/log/nginx
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-config  # Name of the ConfigMap
        - name: log-volume
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 32223
  type: NodePort


#This setup provides a flexible and dynamic way to manage your NGINX configuration in Kubernetes,
# without needing to rebuild the Docker image whenever you change the nginx.conf file.
#The NGINX container in your deployment will ignore the default nginx.conf that comes with the Docker image because it's being overridden by the ConfigMap.
#The container will use the custom nginx.conf that you provided via the ConfigMap, allowing you to have full control over the NGINX configuration, without needing to modify the Docker image itself.